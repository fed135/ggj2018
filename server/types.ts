export interface IConnection {
  hostname: string,
  port: number,
  transport: {
    listen: Function,
    send: Function,
    createSocket: Function,
    attachSocket: Function,
    getOrigin: Function,
    stop: Function,
    disconnect: Function,
  },
  serial: {
    encode: Function,
    decode: Function
  },
  secretKey: string | null,
  profile: { tick: number, maxBytes: number },
  socketTimeout: number,
  subscribe: Function,
  unsubscribe: Function,
  trigger: Function,
  channels: {},
  queues: {},
  queue: Function,
  flush: Function,
  write: Function,
  destroy: Function,
  handleRequest: Function,
  backlog: any[],
  pending: any[],
  connected: number,
  init: Function,
  domain: any,
  _events: any,
  _maxListeners: any,
  setMaxListeners: Function,
  getMaxListeners: Function,
  emit: Function,
  addListener: Function,
  on: Function,
  prependListener: Function,
  once: Function,
  prependOnceListener: Function,
  removeListener: Function,
  removeAllListeners: Function,
  listeners: Function,
  listenerCount: Function,
  eventNames: Function,
  id: string,
  catch: any,
  socket: {
    external: Function,
    internalOnMessage: Function,
    internalOnClose: Function,
    onping: Function,
    onpong: Function
  },
  isServer: boolean,
  server: {
    connections: IConnection[  ],
    broadcast: Function,
    stop: Function
  },
  session: Object,
}
